#!/bin/bash

# Config file for a given application should be located at ./.runconf.sh

function subs {
    TO_SUBS=$(echo -n "$3" | sed -E 's/\\/\\\\/g;s,/,\\/,g')
    echo -n $1 | sed -E "s/$2/${TO_SUBS}/g"
}

if [ -e .runconf.sh ]; then
    source .runconf.sh
else
    echo "No configuration file found, exiting."
    exit 1
fi

GREP_FILTER=$(subs "^$VERSION_PATTERN.?\$" "%v" "$VERSION_FORMAT")
SED_COMMAND=$(subs "s/^${VERSION_PATTERN}.?\$/\1/" "%v" "($VERSION_FORMAT)")
LAT_VER_TAG=$($VERSION_COMMAND $VERSION_URL | grep -E "$GREP_FILTER" | sed -E "$SED_COMMAND")
echo "LAT_VER_TAG: $LAT_VER_TAG"

SED_COMMAND=$(subs "s/$STORED_ARCHIVE_PATTERN/\1/" "%v" "($VERSION_FORMAT)")
if [ -d "$ARCHIVE_FOLDER" ]; then
    STORED_VER="$ARCHIVE_FOLDER/$(ls -rv "$ARCHIVE_FOLDER" | head -n 1)"
    LOC_VER_TAG=$(ls -rv "$ARCHIVE_FOLDER" | head -n 1 | sed -E "$SED_COMMAND")
else
    STORED_VER=""
    LOC_VER_TAG=""
fi

if [ "$LAT_VER_TAG" == "$LOC_VER_TAG" ]; then
    echo "Already up to date. Starting..."
else
    ACTUAL_LATEST=$(echo -e "${LAT_VER_TAG}\n${LOC_VER_TAG}" | sort -rV | head -n 1)
    if [ "$LOC_VER_TAG" == "$ACTUAL_LATEST" ]; then
	echo "Local version more recent than remote version." >&2
    else
	if [ "$LOC_VER_TAG" == "" ]; then
	    response="y"
	else
       	    read -p "A new version is available. Would you like to download it? (y/n) " response
	fi
	while [[ "$response" != "n" ]] && [[ "$response" != "y" ]]; do
	    read -p "Please enter y or n. " response
	done
	if [[ "$response" == "y" ]]; then
	    echo "Downloading new version..."
	    if [ ! -d "$ARCHIVE_FOLDER" ]; then
		mkdir "$ARCHIVE_FOLDER"
	    fi
	    STORED_VER=$(subs "${ARCHIVE_FOLDER}/${STORED_ARCHIVE_PATTERN}" "%v" "$LAT_VER_TAG")
	    LOC_VER_TAG="$LAT_VER_TAG"
	    if [ -f "$STORED_VER" ]; then
		echo "Remote version already exists locally, something's gone wrong." >&2
		exit
	    fi
	    DOWNLOAD_LOC=$(subs "$DOWNLOAD_URL" "%v" "$LAT_VER_TAG")
	    $DOWNLOAD_COMMAND -o "$STORED_VER" -L "$DOWNLOAD_LOC"
	else
	    echo "Okay. Starting old version..."
	fi
    fi
fi

EXEC_VER_PATH=$(subs "${EXEC_FOLDER}/%v/${EXEC_FORMAT}" "%v" "${LOC_VER_TAG}")
if [ -e "$EXEC_VER_PATH" ]; then
    echo "No unpacking necessary."
else
    echo "Unpacking..."
    if [ -d "./$EXEC_FOLDER" ]; then
	rm -rf "./${EXEC_FOLDER}/"*
    else
	mkdir "$EXEC_FOLDER"
    fi
    mkdir "${EXEC_FOLDER}/${LOC_VER_TAG}"
    if [ -d ./Temp ]; then
	rm -rf ./Temp
    fi
    mkdir Temp
    $EXTRACT_COMMAND "$STORED_VER" $EXTRACT_LOC_FLAG Temp
    MOVE_ITEMS_FOLDER=$(subs "./Temp/${MOVE_ALL_UNDER}/" "%v" "${LOC_VER_TAG}")
    mv "$MOVE_ITEMS_FOLDER"* "./${EXEC_FOLDER}/${LOC_VER_TAG}/"
    rm -rf Temp
fi

if grep -iq microsoft /proc/version; then
    [ -z "$EXEC_COMMAND_WINDOWS" ] && EXEC_COMMAND_WINDOWS="%x"
    [ -z "$EXEC_COMMAND_WINDOWS_ARGS" ] && EXEC_COMMAND_WINDOWS_ARGS=()
    EXEC_COMMAND_WINDOWS=$(subs "$EXEC_COMMAND_WINDOWS" "%x" "./$EXEC_VER_PATH")
    for i in ${!EXEC_COMMAND_WINDOWS_ARGS[@]}; do
	EXEC_COMMAND_WINDOWS_ARGS[$i]=$(subs "${EXEC_COMMAND_WINDOWS_ARGS[$i]}" "%x" "./$EXEC_VER_PATH")
    done
    nohup "$EXEC_COMMAND_WINDOWS" "${EXEC_COMMAND_WINDOWS_ARGS[@]}" &>/dev/null &
else
    [ -z "$EXEC_COMMAND_LINUX" ] && EXEC_COMMAND_LINUX="wine"
    [ -z "$EXEC_COMMAND_LINUX_ARGS" ] && EXEC_COMMAND_LINUX_ARGS=("%x")
    EXEC_COMMAND_LINUX=$(subs "$EXEC_COMMAND_LINUX" "%x" "./$EXEC_VER_PATH")
    for i in ${!EXEC_COMMAND_LINUX_ARGS[@]}; do
	EXEC_COMMAND_LINUX_ARGS[$i]=$(subs "${EXEC_COMMAND_LINUX_ARGS[$i]}" "%x" "./$EXEC_VER_PATH")
    done
    nohup "$EXEC_COMMAND_LINUX" "${EXEC_COMMAND_LINUX_ARGS[@]}" &>/dev/null &
fi

